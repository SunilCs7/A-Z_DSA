#include <iostream>

using namespace std;

int maxSubarraySum(int arr[], int n) {
  int max_so_far = INT_MIN; // Initialize max_so_far with the minimum possible integer value
  int max_ending_here = 0;   // Initialize max_ending_here to 0

  for (int i = 0; i < n; i++) {
    max_ending_here = max(arr[i], max_ending_here + arr[i]);  // Update max_ending_here

    // If current sum (max_ending_here) is greater than max_so_far, update max_so_far
    if (max_so_far < max_ending_here) {
      max_so_far = max_ending_here;
    }
  }

  return max_so_far;
}

int main() {
  int arr[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
  int n = sizeof(arr) / sizeof(arr[0]);

  int max_sum = maxSubarraySum(arr, n);

  cout << "Maximum contiguous subarray sum: " << max_sum << endl;

  return 0;
}
